#include <iostream>
using namespace std;

int main() {
    cout << "\a";
    return 0;
}
------------------------------------------
#include <iostream>
using namespace std;

int main() {
    cout << "Dear Sir/Madam," << endl;
    cout << endl; 
    cout << "How are you?" << endl;
    cout << endl;
    cout << "My name is: \"Mohammed\", nice to meet you." << endl;
    return 0;
}
------------------------------------------
#include <iostream>
using namespace std;

int main() {
    cout << "Ali\tAhmed\tLina" << endl;
    cout << "Fadi\tZain\tMona" << endl;
    return 0;
}
------------------------------------------
What is a Literal?
A literal is a fixed value explicitly written in the source code. It's a constant that represents data directly in a program. For example:
5 (an integer literal)
'a' (a character literal)
"Hello, World!" (a string literal)
3.14 (a floating-point literal)
Literals are the basic building blocks of data in programming, and they are interpreted as-is by the compiler or interpreter.

Can You Assign Different Values to a Literal?
No, you cannot assign a value to a literal. Literals are fixed values that exist independently. For example:

cpp
Copy code
int x = 5;  // '5' is a literal assigned to the variable 'x'
Here, 5 is a literal, and x is a variable. While you can assign different values to x during program execution, the literal 5 itself cannot change.

What Are Literal Types?
Literals come in different types depending on the kind of value they represent. Common types of literals include:

Integer literals
Examples: 1, 42, 0x1F (hexadecimal), 077 (octal)
Can have suffixes like u or U (unsigned), l or L (long), ul or UL (unsigned long).

Floating-point literals
Examples: 3.14, 2.0E5 (scientific notation)
Can have suffixes like f or F (float), l or L (long double).

Character literals
Examples: 'a', '1', '\n' (newline character).

String literals
Examples: "Hello", "123".

Boolean literals
Examples: true, false.

Null pointer literal
Example: nullptr in modern C++.

Why Do We Need Escape Sequence Literals?
Escape sequence literals are used to represent special characters or characters that cannot be directly typed into a string or character literal. They are needed to:

Include special characters in strings.
Example: \n (newline), \t (tab).

Represent control characters.
Example: \0 (null character).

Escape quotation marks in strings.
Example: "She said, \"Hello!\"".

Represent characters with specific ASCII or Unicode values.
Example: \x41 (hexadecimal for 'A'), \u03B1 (Unicode for α).

Without escape sequences, representing such characters would be difficult or impossible.

Examples of Escape Sequence Literals:
\n → Newline
\t → Tab
\\ → Backslash
\" → Double quotation mark
\' → Single quotation mark
\xhh → Hexadecimal value of a character
\uhhhh → Unicode character (C++11 and later)
Example in C++:

cpp
Copy code
#include <iostream>
using namespace std;

int main() {
    cout << "Hello,\nWorld!" << endl;  // Uses \n for a new line
    cout << "Path: C:\\Program Files\\" << endl;  // Uses \\ for a backslash
    cout << "He said, \"Welcome!\"" << endl;  // Uses \" to escape quotes
    return 0;
}
Output:

mathematica
Copy code
Hello,
World!
Path: C:\Program Files\
He said, "Welcome!"








